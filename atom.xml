<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lyn的个人博客</title>
  <subtitle>Java 学习历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-02T17:03:25.864Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lyn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过JVM理解函数调用过程</title>
    <link href="http://yoursite.com/2017/06/25/%E9%80%9A%E8%BF%87JVM%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/06/25/通过JVM理解函数调用过程/</id>
    <published>2017-06-25T15:50:57.000Z</published>
    <updated>2017-07-02T17:03:25.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个函数的调用过程"><a href="#一个函数的调用过程" class="headerlink" title="一个函数的调用过程"></a>一个函数的调用过程</h2><p>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		int a = 1;</div><div class="line">		int b = 2;</div><div class="line">		int t = a + b;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们先看字节码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  Code:</div><div class="line">     0: iconst_1</div><div class="line">     1: istore_1</div><div class="line">     2: iconst_2</div><div class="line">     3: istore_2</div><div class="line">     4: iload_1</div><div class="line">     5: iload_2</div><div class="line">     6: iadd</div><div class="line">     7: istore_3</div><div class="line">     8: return</div></pre></td></tr></table></figure>
<p>虚拟机会开辟一段内存做为栈帧.栈帧上有局部变量表,还有操作数栈.暗蓝色代表局部变量表:<br><img src="//os3e5ayd1.bkt.clouddn.com//file/2017/6/8a3cc212929b4b3aa6c9c2270e152926-image.png" alt="8a3cc212929b4b3aa6c9c2270e152926-image.png"><br><a id="more"></a><br>0: iconst1: 将常量1放入操作数栈顶<br> <img src="//os3e5ayd1.bkt.clouddn.com//file/2017/6/6424c43ae6a844d4b6e35529661c81e6-image.png" alt="6424c43ae6a844d4b6e35529661c81e6-image.png"> </p>
<p>1: istore1: 取出栈顶值(出栈操作),放入局部变量表第一个位置,这时frame栈帧 变成了这样:<br> <img src="//os3e5ayd1.bkt.clouddn.com//file/2017/6/ec8759eb4b27445fbacbdd5e518cd3a5-image.png" alt="ec8759eb4b27445fbacbdd5e518cd3a5-image.png"> </p>
<p>2,3步同理<br>4,5 iload; 取出对应局部变量表的值,并存入操作栈顶 (取a值1送入操作栈顶,然后取b值2送入操作栈顶),现在变为这样<br><img src="//os3e5ayd1.bkt.clouddn.com//file/2017/6/160634e2c2db47b1beaae961d35080d7-image.png" alt="160634e2c2db47b1beaae961d35080d7-image.png"> </p>
<p>6 iadd: 对操作栈顶2个数据做出栈操作,求和后送入栈顶,结果为操作栈只有一个数,3<br><img src="//os3e5ayd1.bkt.clouddn.com//file/2017/6/36109212479444fb8e44bc0fcf8d25ea-image.png" alt="36109212479444fb8e44bc0fcf8d25ea-image.png"> </p>
<ol>
<li>istore3: 同理,取出栈顶值,放入局部变量表第三个位置</li>
</ol>
<h2 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h2><p>堆(heap)是一块独立的内存空间.在创建对象的时候, 我们可以把真正的对象放到堆里,只在栈里记录这个对象的地址就可以了<br>现在有如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">	public static void main(String args[]) &#123;</div><div class="line">		A a = new A(1);</div><div class="line">		A b = new A(2);</div><div class="line">		swap(a, b);</div><div class="line">		System.out.println(&quot;a&apos;s value is &quot; + a.value +&quot;, b&apos;s value is &quot; + b.value);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void swap(A a, A b) &#123;</div><div class="line">		int t = a.value;</div><div class="line">		a.value = b.value;</div><div class="line">		b.value = t;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class A &#123;</div><div class="line">	public int value;</div><div class="line">	public A(int v) &#123;</div><div class="line">		this.value = v;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="//os3e5ayd1.bkt.clouddn.com//file/2017/6/111c06f672c84a0f8b10b12ae7e82b31-image.png" alt="111c06f672c84a0f8b10b12ae7e82b31-image.png"><br>传入swap的都是副本,但是都是指向同一个地址,所以swap是可以正常修改对象值的,相反的,如果传入的参数是primitive type,那么在swap里修改的就是副本的值了,对原值没有任何影响</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个函数的调用过程&quot;&gt;&lt;a href=&quot;#一个函数的调用过程&quot; class=&quot;headerlink&quot; title=&quot;一个函数的调用过程&quot;&gt;&lt;/a&gt;一个函数的调用过程&lt;/h2&gt;&lt;p&gt;代码:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class Main &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public static void main(String args[]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		int a = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		int b = 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		int t = a + b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先我们先看字节码:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public static void main(java.lang.String[]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Code:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     0: iconst_1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     1: istore_1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     2: iconst_2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     3: istore_2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     4: iload_1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     5: iload_2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     6: iadd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     7: istore_3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     8: return&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虚拟机会开辟一段内存做为栈帧.栈帧上有局部变量表,还有操作数栈.暗蓝色代表局部变量表:&lt;br&gt;&lt;img src=&quot;//os3e5ayd1.bkt.clouddn.com//file/2017/6/8a3cc212929b4b3aa6c9c2270e152926-image.png&quot; alt=&quot;8a3cc212929b4b3aa6c9c2270e152926-image.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点归纳(one)</title>
    <link href="http://yoursite.com/2017/06/20/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E5%BD%92%E7%BA%B3-one/"/>
    <id>http://yoursite.com/2017/06/20/Java知识点归纳-one/</id>
    <published>2017-06-19T16:00:08.000Z</published>
    <updated>2017-07-02T17:02:50.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO流-适配器-装饰器"><a href="#IO流-适配器-装饰器" class="headerlink" title="IO流, 适配器, 装饰器"></a>IO流, 适配器, 装饰器</h2><p>Java有以下四种抽象流类型</p>
<ul>
<li><p>InputStream, OutputStream: 能自动解码并向我们提供字符读写的接口.这个类打通了字节处理与字符处理之间的堑沟.这个类就叫做适配器类能自动解码并向我们提供字符读写的接口.这个类打通了字节处理与字符处理之间的堑沟.这个类就叫做适配器类.</p>
<h3 id="适配模式"><a href="#适配模式" class="headerlink" title="适配模式"></a>适配模式</h3><p><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170703/2Ac228C7Ji.png?imageslim" alt="mark"></p>
</li>
<li><p>Reader, Writer: 现在已经有了字节码处理的 InputStream，我们的目标接口是可以处理字符的Reader, 所以我们就需要一个可以把字节码转成字符的 InputStreamReader.这就是适配器.</p>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170703/8AeC8gcbBG.png?imageslim" alt="mark"></p>
</li>
</ul>
<h3 id="Java中的IO流图解"><a href="#Java中的IO流图解" class="headerlink" title="Java中的IO流图解"></a>Java中的IO流图解</h3><p><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170703/LJlA0D56k1.png?imageslim" alt="mark"></p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170703/FD85D8918h.png?imageslim" alt="mark"><br><a id="more"></a></p>
<ul>
<li>可查异常（checked exceptions）<blockquote>
<p>　除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常.这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过．</p>
</blockquote>
</li>
<li>不可查的异常（unchecked exceptions）<blockquote>
<p>包括运行时异常（RuntimeException与其子类）和错误（Error).</p>
</blockquote>
</li>
<li>RuntimeException<blockquote>
<p>NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理.这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生.运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过.</p>
</blockquote>
</li>
<li>RuntimeException以外的Exception<blockquote>
<p>从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过.如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常.</p>
</blockquote>
</li>
</ul>
<h2 id="Java的安全性"><a href="#Java的安全性" class="headerlink" title="Java的安全性"></a>Java的安全性</h2><ol>
<li>严格遵循面向对象的规范.这样封装了数据细节，只提供接口给用户.增加了数据级的安全性.</li>
<li>无指针运算.java中的操作，除了基本类型都是引用的操作.引用是不能进行增减运算，不能被直接赋予内存地址的，从而增加了内存级的安全性.</li>
<li>数组边界检查.这样就不会出现C/C++中的缓存溢出等安全漏洞.</li>
<li>强制类型转换.非同类型的对象之间不能进行转换，否则会抛出ClassCastException</li>
<li>语言对线程安全的支持.java从语言级支持线程.从而从语法和语言本身做了很多对线程的控制和支持.</li>
<li>GC</li>
<li>Exception</li>
</ol>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>线程安全是一个很大的问题Java最常见的<code>HttpServlet</code>就是单实例多线程，解决这样的问题，有多种方式：</p>
<ul>
<li>ThreadLocal<blockquote>
<p>ThreadLocal 就是将变量存到线程自己的工作内存中，所以不会有并发问题.</p>
</blockquote>
</li>
<li>Synchronized<blockquote>
<p>synchronized锁住的是括号里的对象，而不是代码.对于非 static 的 synchronized 方法，锁的就是对象本身也就是 this.该关键字可以加到：实例方法/静态方法/实例方法中的同步块/静态方法中的同步块</p>
</blockquote>
</li>
<li><p>ReentrantLock / Condition</p>
<blockquote>
<p>synchronized 不够灵活，例如读写文件，读和读之间不应该互斥，这个时候就可以使用 ReentrantLock 增加并发能力.Condition 是绑定到 Lock 上的，可以用于线程间通信</p>
</blockquote>
</li>
<li><p>并发容器</p>
<blockquote>
<p>常见的 ConcurrentHashMap CopyOnWriteArrayList 用于多线程下存放数据，Queue BlockingQueue 用于排队消费.</p>
</blockquote>
</li>
<li><p>Atomic包 </p>
<blockquote>
<p>在 Atomic 包里一共有 12 个类，四种原子更新方式，分别是原子更新基本类型，原子更新数组，原子更新引用和原子更新字段.某些并发问题，需要无锁解决时，就可以考虑使用原子方法.</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IO流-适配器-装饰器&quot;&gt;&lt;a href=&quot;#IO流-适配器-装饰器&quot; class=&quot;headerlink&quot; title=&quot;IO流, 适配器, 装饰器&quot;&gt;&lt;/a&gt;IO流, 适配器, 装饰器&lt;/h2&gt;&lt;p&gt;Java有以下四种抽象流类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;InputStream, OutputStream: 能自动解码并向我们提供字符读写的接口.这个类打通了字节处理与字符处理之间的堑沟.这个类就叫做适配器类能自动解码并向我们提供字符读写的接口.这个类打通了字节处理与字符处理之间的堑沟.这个类就叫做适配器类.&lt;/p&gt;
&lt;h3 id=&quot;适配模式&quot;&gt;&lt;a href=&quot;#适配模式&quot; class=&quot;headerlink&quot; title=&quot;适配模式&quot;&gt;&lt;/a&gt;适配模式&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://os3e5ayd1.bkt.clouddn.com/blog/170703/2Ac228C7Ji.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reader, Writer: 现在已经有了字节码处理的 InputStream，我们的目标接口是可以处理字符的Reader, 所以我们就需要一个可以把字节码转成字符的 InputStreamReader.这就是适配器.&lt;/p&gt;
&lt;h3 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://os3e5ayd1.bkt.clouddn.com/blog/170703/8AeC8gcbBG.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Java中的IO流图解&quot;&gt;&lt;a href=&quot;#Java中的IO流图解&quot; class=&quot;headerlink&quot; title=&quot;Java中的IO流图解&quot;&gt;&lt;/a&gt;Java中的IO流图解&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://os3e5ayd1.bkt.clouddn.com/blog/170703/LJlA0D56k1.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://os3e5ayd1.bkt.clouddn.com/blog/170703/FD85D8918h.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>FlashSale-高并发秒杀系统</title>
    <link href="http://yoursite.com/2017/06/18/FlashSale-%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/06/18/FlashSale-高并发秒杀系统/</id>
    <published>2017-06-18T05:07:08.000Z</published>
    <updated>2017-07-06T12:01:03.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FlashSale-高并发秒杀系统"><a href="#FlashSale-高并发秒杀系统" class="headerlink" title="FlashSale - 高并发秒杀系统"></a>FlashSale - 高并发秒杀系统</h1><h2 id="GitHub源码地址"><a href="#GitHub源码地址" class="headerlink" title="GitHub源码地址"></a>GitHub源码地址</h2><p><a href="https://github.com/lddahz789" target="_blank" rel="external">https://github.com/lddahz789</a></p>
<h2 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p><code>Download Zip</code>或者 <code>git clone</code></p>
<blockquote>
<p>git clone <a href="https://github.com/lddahz789/FlashSale.git" target="_blank" rel="external">https://github.com/lddahz789/FlashSale.git</a></p>
</blockquote>
<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h3><p>修改resources下<code>jdbc.propertites</code>为你的数据库配置<br>修改resources/spring下<code>spring-dao.xml</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 注入RedisDAO --&gt;</div><div class="line">    &lt;bean id=&quot;redisDAO&quot; class=&quot;com.flashsale.dao.cache.RedisDAO&quot;&gt;</div><div class="line">    	&lt;constructor-arg index=&quot;0&quot; value=&quot;http://106.14.173.104&quot;/&gt;</div><div class="line">    	&lt;constructor-arg index=&quot;1&quot; value=&quot;6379&quot;/&gt;</div><div class="line">    &lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>为你的redis服务器地址或者localhost</p>
<h3 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h3><p>部署项目到tomcat之类的web容器</p>
<blockquote>
<p>注: 如图在web目录下中的js文件中请将此更改为你的项目地址(server.xml中配置的) 或者更改为获取到的contextPath<br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/g06dc1BhmD.png?imageslim" alt="mark"><br><a id="more"></a></p>
</blockquote>
<h3 id="4-Enjoy"><a href="#4-Enjoy" class="headerlink" title="4. Enjoy"></a>4. Enjoy</h3><p>访问<a href="http://你的域名/你的项目名" target="_blank" rel="external">http://你的域名/你的项目名</a></p>
<h2 id="项目在线演示"><a href="#项目在线演示" class="headerlink" title="项目在线演示:"></a>项目在线演示:</h2><p><a href="http://example.bestzhuo.top/miaosha" target="_blank" rel="external">http://example.bestzhuo.top/miaosha</a> (近期备案中,可能会影响访问)<br>or<br><a href="http://106.14.173.104/miaosha" target="_blank" rel="external">http://106.14.173.104/miaosha</a></p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/HL644h0bI0.png?imageslim" alt="mark"><br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/1mm4iAbfC7.png?imageslim" alt="mark"><br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/2e3gIIjD4a.png?imageslim" alt="mark"><br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/9Lj0K1mLA1.png?imageslim" alt="mark"><br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/mH8hklmj8i.png?imageslim" alt="mark"></p>
<h2 id="项目设计思路"><a href="#项目设计思路" class="headerlink" title="项目设计思路"></a>项目设计思路</h2><h3 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h3><ul>
<li>product: 存放商品信息,包含商品ID,库存,秒杀相关的时间</li>
<li>order: 存放订单信息,由于没有做登录模块,所以从cookie中读取用户手机,手机+商品ID为订单的主键<h3 id="2-DAO层设计"><a href="#2-DAO层设计" class="headerlink" title="2. DAO层设计"></a>2. DAO层设计</h3></li>
<li>整合MyBatis与Spring实现DAO层,这里用的是接口+MAPPER.XML的方式</li>
<li>编写DAO相关的JUnit测试<h3 id="3-SERVICE层设计"><a href="#3-SERVICE层设计" class="headerlink" title="3. SERVICE层设计"></a>3. SERVICE层设计</h3></li>
<li>站在使用者的角度设计SERVICE层的接口</li>
<li>实现接口,完成业务逻辑,包括加密等操作都在这执行</li>
<li>service: 存放服务，即为一系列逻辑</li>
<li>exception:    存放service接口所需要的异常，如重复秒杀，秒杀与关闭等</li>
<li>dto: 数据传输层，与entity类似，存放一些表示数据的类型，web与service间的数据传递</li>
<li>enums: 封装枚举类，表述常量字段-状态值（“秒杀成功”，“秒杀结束”等等）</li>
<li><p>web接口设计,基于RESTful</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET	/flashsale/list	（秒杀列表）</div><div class="line">GET	/flashsale/&#123;id&#125;/detail	（详情页）</div><div class="line">GET	/flashsale/time/now	（系统时间）</div><div class="line">POST	/flashsale/&#123;id&#125;/exposer	（暴露秒杀）</div><div class="line">POST /flashsale/&#123;id&#125;/&#123;md5&#125;/execution	（执行秒杀</div></pre></td></tr></table></figure>
</li>
<li><p>完成JUnit单元测试</p>
<h3 id="4-Web层设计"><a href="#4-Web层设计" class="headerlink" title="4. Web层设计"></a>4. Web层设计</h3><h4 id="页面逻辑"><a href="#页面逻辑" class="headerlink" title="页面逻辑"></a>页面逻辑</h4><p><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/D5828e6101.png?imageslim" alt="mark"></p>
</li>
<li>jsp页面模块化设计</li>
<li>js模块化设计</li>
<li>Ajax的应用<h3 id="5-并发优化"><a href="#5-并发优化" class="headerlink" title="5. 并发优化"></a>5. 并发优化</h3><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/G7cgJdd2if.png?imageslim" alt="mark"><br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/BccED716lm.png?imageslim" alt="mark"><br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/5a6j99JDbC.png?imageslim" alt="mark"></li>
<li>对于静态资源,使用CDN服务</li>
<li>对于秒杀地址暴露的接口这种情况,我们可以用redis缓存.</li>
<li>对于获取时间操作,不必优化,本身执行就很快,可以达到10WQPS.</li>
<li>为了减少MYSQL的行级锁持有时间,将更新库存操作与增加订单操作顺序对调.</li>
<li>进一步优化: 为了减少网络延迟跟GC带来的影响,我们使用数据库存储过程来取代JAVA中的事务<h3 id="进一步优化-TODO"><a href="#进一步优化-TODO" class="headerlink" title="进一步优化 //TODO"></a>进一步优化 //TODO</h3></li>
<li>使用分布式数据库 分表</li>
<li>Nginx与WEB容器配合(反向代理) 集群化部署</li>
<li>Redis 集群化部署<br><img src="http://os3e5ayd1.bkt.clouddn.com/blog/170705/J9K518hCeF.png?imageslim" alt="mark"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FlashSale-高并发秒杀系统&quot;&gt;&lt;a href=&quot;#FlashSale-高并发秒杀系统&quot; class=&quot;headerlink&quot; title=&quot;FlashSale - 高并发秒杀系统&quot;&gt;&lt;/a&gt;FlashSale - 高并发秒杀系统&lt;/h1&gt;&lt;h2 id=&quot;GitHub源码地址&quot;&gt;&lt;a href=&quot;#GitHub源码地址&quot; class=&quot;headerlink&quot; title=&quot;GitHub源码地址&quot;&gt;&lt;/a&gt;GitHub源码地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/lddahz789&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/lddahz789&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目使用&quot;&gt;&lt;a href=&quot;#项目使用&quot; class=&quot;headerlink&quot; title=&quot;项目使用&quot;&gt;&lt;/a&gt;项目使用&lt;/h2&gt;&lt;h3 id=&quot;1-下载&quot;&gt;&lt;a href=&quot;#1-下载&quot; class=&quot;headerlink&quot; title=&quot;1. 下载&quot;&gt;&lt;/a&gt;1. 下载&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Download Zip&lt;/code&gt;或者 &lt;code&gt;git clone&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone &lt;a href=&quot;https://github.com/lddahz789/FlashSale.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/lddahz789/FlashSale.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-修改配置文件&quot;&gt;&lt;a href=&quot;#2-修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;2. 修改配置文件&quot;&gt;&lt;/a&gt;2. 修改配置文件&lt;/h3&gt;&lt;p&gt;修改resources下&lt;code&gt;jdbc.propertites&lt;/code&gt;为你的数据库配置&lt;br&gt;修改resources/spring下&lt;code&gt;spring-dao.xml&lt;/code&gt;中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 注入RedisDAO --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;bean id=&amp;quot;redisDAO&amp;quot; class=&amp;quot;com.flashsale.dao.cache.RedisDAO&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&amp;lt;constructor-arg index=&amp;quot;0&amp;quot; value=&amp;quot;http://106.14.173.104&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&amp;lt;constructor-arg index=&amp;quot;1&amp;quot; value=&amp;quot;6379&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/bean&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为你的redis服务器地址或者localhost&lt;/p&gt;
&lt;h3 id=&quot;3-部署&quot;&gt;&lt;a href=&quot;#3-部署&quot; class=&quot;headerlink&quot; title=&quot;3. 部署&quot;&gt;&lt;/a&gt;3. 部署&lt;/h3&gt;&lt;p&gt;部署项目到tomcat之类的web容器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注: 如图在web目录下中的js文件中请将此更改为你的项目地址(server.xml中配置的) 或者更改为获取到的contextPath&lt;br&gt;&lt;img src=&quot;http://os3e5ayd1.bkt.clouddn.com/blog/170705/g06dc1BhmD.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>2道很有意思的进制题</title>
    <link href="http://yoursite.com/2017/06/17/2%E9%81%93%E5%BE%88%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E8%BF%9B%E5%88%B6%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/17/2道很有意思的进制题/</id>
    <published>2017-06-17T11:49:35.000Z</published>
    <updated>2017-07-02T17:02:34.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>1.一共有10只老鼠，1000只水杯，杯子里都盛着水，只有一个杯中是有毒的液体，这种毒 液老鼠喝下去以后，一个星期就会死掉。现在要求使用这10只老鼠，在一个星期之内找出盛着毒液的杯子。</p>
</blockquote>
<p>分析一下，这道题目其实是一道和二进制相关的题目。由于只能在一个星期内完成任务，那就说明不能进行重复的实验。这样的话，由于10只老鼠在一个星期以后的状态只能是死亡或者存活两种状态，根据乘法原理，我们知道，10个单位的两种状态，可能出现的所有可能是2^10 = 1024。足够编码1000个杯子了。也就是说，我们现在的任务是把1000个杯子 与10只老鼠的死和活的组合一一对应起来。如果把1到1000表示成二进制，那么答案就很明显了。</p>
<p>将1到1000共一千个数，都转换成二进制编码。对于数字A，如果它的二进制的最低位 是1，那么就让1号老鼠喝一点这个杯子里的液体，如果是0就不喝。A的二进制的倒数第二低位如果是1，那么编号为2的老鼠就喝，否则不喝。依次类推。直到最高位如果是1，那么编号为10的老鼠就喝，否则该老鼠不喝。一个星期以后观察结果，如果编号为x的老鼠死掉 了，那么就从低向高数x位，在那个位置上标1，其他的位置标0。例如，如果只有2号和4号 老鼠死掉了，那么记录的结果就是“00 0000 1010”，这样一个二进制数。把它转成十进制是10，这就意味着10号杯子里装的是毒液，其他杯子则是水。</p>
<a id="more"></a>
<blockquote>
<p>2.有一架天平，它有20个砝码，这20个砝码的重量分别为 1,3,9,27···3^19。只要被称的物品的重量为位于区间 [1,(3^20−1)/2] 的整数，就可以使用这架天平进行称量。假设物品一直放在天平的左边，现在给出每个物品的重量，请打印出称量的方案。输出格式为两组数字，第一组代表天平左边要放的砝码，第二组代表天平右边要放的砝码。这两组数中间用空格隔开。每一组内部的数使用逗号隔开。如果天平的某一边不需要放砝码，那就打印 empty。<br>例如，输入是9，输出是 empty 9，代表左边不需要额外的砝码，而右边需要放一个重量为 9 的砝码。 输入是4，输出是empty 1,3。</p>
</blockquote>
<p>从最简单的情况入手进行分析。比如说1，那右边只要放1就可以。如果是2，我们可以用左边放1，右边放3这样的方案代替。3，右边只要放3。4，右边放1和4。到了5，由于不能再使用3-1去凑一个2了，所以唯一的方案是左边放1，3，右边放9。同样，6，也只好用9-3来凑。我们来分析一下这个规律。</p>
<p>4 的三进制是 11，代表了1 <em> 3 ^ 1 + 1，5的三进制是12，代表了 1 </em> 3 ^ 1 + 2 <em> 3^0，6的三进制是20，代表了2 </em> 3^1 + 0 * 3^0。由于我们手里的砝码是3^0, 3^1, 3^2……，也就是说，如果目标数字的各个位置上都是1，那我们直接就能组合出来，而如果第n位上是2，就必须使用3^(n+1) - 3^n来凑这个数。也就是说，我们要在天平的左右两边各加上一个3^n，才能保持平衡。这样就把低一位上的2，消除成了高一位上的1。</p>
<p>好了。有了这个算法，我们就可以写出程序了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public int[][] solve(int x) &#123;</div><div class="line">    int pl = 0, pr = 0;</div><div class="line">    int poise = 1, r;</div><div class="line">    final int LEFT = 0, RIGHT = 1;</div><div class="line">    int[][] result = new int[2][20];</div><div class="line"></div><div class="line">    while (x &gt; 0) &#123;</div><div class="line">        r = x % 3;</div><div class="line">        if (r == 2) &#123;</div><div class="line">            result[LEFT][pl++] = poise;</div><div class="line">            x = (x + 1) / 3;</div><div class="line">        &#125;   </div><div class="line">        else if (r == 1) &#123;</div><div class="line">            result[RIGHT][pr++] = poise;</div><div class="line">            x = x / 3;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            x = x / 3;</div><div class="line"></div><div class="line">        poise *= 3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1.一共有10只老鼠，1000只水杯，杯子里都盛着水，只有一个杯中是有毒的液体，这种毒 液老鼠喝下去以后，一个星期就会死掉。现在要求使用这10只老鼠，在一个星期之内找出盛着毒液的杯子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分析一下，这道题目其实是一道和二进制相关的题目。由于只能在一个星期内完成任务，那就说明不能进行重复的实验。这样的话，由于10只老鼠在一个星期以后的状态只能是死亡或者存活两种状态，根据乘法原理，我们知道，10个单位的两种状态，可能出现的所有可能是2^10 = 1024。足够编码1000个杯子了。也就是说，我们现在的任务是把1000个杯子 与10只老鼠的死和活的组合一一对应起来。如果把1到1000表示成二进制，那么答案就很明显了。&lt;/p&gt;
&lt;p&gt;将1到1000共一千个数，都转换成二进制编码。对于数字A，如果它的二进制的最低位 是1，那么就让1号老鼠喝一点这个杯子里的液体，如果是0就不喝。A的二进制的倒数第二低位如果是1，那么编号为2的老鼠就喝，否则不喝。依次类推。直到最高位如果是1，那么编号为10的老鼠就喝，否则该老鼠不喝。一个星期以后观察结果，如果编号为x的老鼠死掉 了，那么就从低向高数x位，在那个位置上标1，其他的位置标0。例如，如果只有2号和4号 老鼠死掉了，那么记录的结果就是“00 0000 1010”，这样一个二进制数。把它转成十进制是10，这就意味着10号杯子里装的是毒液，其他杯子则是水。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="进制" scheme="http://yoursite.com/tags/%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic 实现的一个Java爬虫</title>
    <link href="http://yoursite.com/2017/06/05/WebMagic-%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AAJava%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/06/05/WebMagic-实现的一个Java爬虫/</id>
    <published>2017-06-05T12:50:13.000Z</published>
    <updated>2017-07-02T15:49:13.054Z</updated>
    
    <content type="html"><![CDATA[<p>最近朋友需要开一个快递店,这时候就需要爬取澳洲药房的数据作为自己代发数据的基础,由此就有了这个小项目</p>
<p>爬取对象为澳洲药房</p>
<p>源码: <a href="https://github.com/lddahz789/ChemistSpider" target="_blank" rel="external">Java爬虫</a></p>
<ul>
<li>利用webmagic框架爬取澳洲药房产品数据并结合Mybatis,Spring将数据持久化到MySQL</li>
<li>Using webmagic framework to collect all product information from chemist warehosue in Australia integrated with spring &amp; mybatis, which will persist data into MySQL.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近朋友需要开一个快递店,这时候就需要爬取澳洲药房的数据作为自己代发数据的基础,由此就有了这个小项目&lt;/p&gt;
&lt;p&gt;爬取对象为澳洲药房&lt;/p&gt;
&lt;p&gt;源码: &lt;a href=&quot;https://github.com/lddahz789/ChemistSpider&quot; targe
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="webmgic" scheme="http://yoursite.com/tags/webmgic/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射</title>
    <link href="http://yoursite.com/2017/06/02/Java-%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2017/06/02/Java-反射/</id>
    <published>2017-06-01T17:21:28.000Z</published>
    <updated>2017-07-02T17:02:10.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Class类"><a href="#1-Class类" class="headerlink" title="1. Class类"></a>1. Class类</h1><p>任何一个类都是Class类的实例对象，这个实例对象有 三种表示方式:</p>
<ul>
<li><p>Class c1 = Student.class;//实际告诉我们任何一个类都有一个隐含的静态成员变量class（知道类名时用）</p>
</li>
<li><p>Class c2 = stu.getClass();//已知该类的对象通过getClass方法（知道对象时用）</p>
</li>
<li><p>Class c3 = Class.forName(“类的全名”);//会有一个ClassNotFoundException异常</p>
</li>
</ul>
<p>既然是Class类的实例,那么为什么不用new呢?因为 java.lang.Class类的构造方法是私有的.</p>
<p>通过类类型来建立该类的实例:<br>Student stu = (Student)c1.newInstance();//前提是必须要有无参的构造方法，因为该语句会去调用其无参构造方法。该语句会抛出异常。</p>
<h1 id="2-动态加载类"><a href="#2-动态加载类" class="headerlink" title="2. 动态加载类"></a>2. 动态加载类</h1><h2 id="1、-编译时加载类是静态加载类"><a href="#1、-编译时加载类是静态加载类" class="headerlink" title="1、 编译时加载类是静态加载类"></a>1、 编译时加载类是静态加载类</h2><p>new 创建对象是静态加载类，在编译时刻就需要加载所有可用使用到的类，如果有一个用不了，那么整个文件都无法通过编译<br><a id="more"></a></p>
<h2 id="2、-运行时加载类是动态加载类"><a href="#2、-运行时加载类是动态加载类" class="headerlink" title="2、 运行时加载类是动态加载类"></a>2、 运行时加载类是动态加载类</h2><p>Class c = Class.forName(“类的全名”)，不仅表示了类的类型，还表示了动态加载类，编译不会报错，在运行时才会加载，使用接口标准能更方便动态加载类的实现。功能性的类尽量使用动态加载，而不用静态加载。</p>
<p>许多程序的在线升级，并不需要重新编译文件了，只是动态的加载新的东西</p>
<h1 id="3-获取方法信息"><a href="#3-获取方法信息" class="headerlink" title="3. 获取方法信息"></a>3. 获取方法信息</h1><h2 id="1、基本的数据类型，void关键字都存在类类型"><a href="#1、基本的数据类型，void关键字都存在类类型" class="headerlink" title="1、基本的数据类型，void关键字都存在类类型"></a>1、基本的数据类型，void关键字都存在类类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1 Class c1 =int.class;//int的类类型</div><div class="line">2 Class c2 =String.class;//String类的类类型，可以理解为编译生成的那个String.class字节码文件，</div><div class="line">3 //当然，这并不是官方的说法</div><div class="line">4 Class c3 =double.class;</div><div class="line">5 Class c4 =Double.class;</div><div class="line">6 Class c5 =void.class;</div></pre></td></tr></table></figure>
<h2 id="2、Class类的基本API操作"><a href="#2、Class类的基本API操作" class="headerlink" title="2、Class类的基本API操作"></a>2、Class类的基本API操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">1 /**</div><div class="line"> 2     * 打印类的信息，包括类的成员函数，成员变量</div><div class="line"> 3 * @param obj 该对象所属类的信息信息</div><div class="line"> 4 */</div><div class="line"> 5 publicstaticvoid printClassMessage(Object obj)&#123;</div><div class="line"> 6 //要获取类的信息，首先要获取类的类类型</div><div class="line"> 7 Class c = obj.getClass();//传递的是哪个子类的对象，c就是该子类的类类型</div><div class="line"> 8 //获取类的名称</div><div class="line"> 9 System.out.println(&quot;类的名称是：&quot;+c.getName());</div><div class="line">10 </div><div class="line">11 /*</div><div class="line">12     * Method类，方法的对象</div><div class="line">13 * 一个成员方法就是一个Method对象</div><div class="line">14 * getMethods()方法获取的是所有的public的函数，包括父类继承而来的</div><div class="line">15 * getDeclaredMethods()获取的是多有该类自己声明的方法，不问访问权限</div><div class="line">16 */</div><div class="line">17 Method[] ms = c.getMethods();//c.getDeclaredMethods();</div><div class="line">18 for(int i =0; i &lt; ms.length; i++)&#123;</div><div class="line">19 //得到方法的返回值类型的类类型</div><div class="line">20 Class retrunType = ms[i].getReturnType();</div><div class="line">21 System.out.print(retrunType.getName()+&quot; &quot;);</div><div class="line">22 //得到方法的名称</div><div class="line">23 System.out.print(ms[i].getName()+&quot;(&quot;);</div><div class="line">24 //获取的参数类型---&gt;得到的是参数列表的类型的类类型</div><div class="line">25 Class[] paraTypes = ms[i].getParameterTypes();</div><div class="line">26 for(Class class1 : paraTypes)&#123;</div><div class="line">27 System.out.print(class1.getName()+&quot;,&quot;);</div><div class="line">28 &#125;</div><div class="line">29 System.out.println(&quot;)&quot;);</div><div class="line">30 &#125;</div><div class="line">31 &#125;</div></pre></td></tr></table></figure>
<p>在执行任何操作之前,想要获得类的各种信息,要先获得类类型</p>
<h1 id="4-获取成员变量构造函数"><a href="#4-获取成员变量构造函数" class="headerlink" title="4. 获取成员变量构造函数"></a>4. 获取成员变量构造函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> 1 /**</div><div class="line"> 2     * 成员变量也是对象，是java.lang.reflect.Field这个类的的对象</div><div class="line"> 3 * Field类封装了关于成员变量的操作</div><div class="line"> 4 * getFields()方法获取的是所有public的成员变量的信息</div><div class="line"> 5 * getDeclareFields()方法获取的是该类自己声明的成员变量的信息</div><div class="line"> 6 */</div><div class="line"> 7 Field[] fs = c.getDeclaredFields();</div><div class="line"> 8 for(Field field : fs)&#123;</div><div class="line"> 9 //得到成员变量的类型的类类型</div><div class="line">10 Class fieldType = field.getType();</div><div class="line">11 String typeName = fieldType.getName();</div><div class="line">12 //得到成员变量的名称</div><div class="line">13 String fieldName = field.getName();</div><div class="line">14 System.out.print(typeName+&quot; &quot;+fieldName);</div><div class="line">15 &#125;</div><div class="line">16 </div><div class="line">17 </div><div class="line">18 /**</div><div class="line">19     * 构造函数也是对象</div><div class="line">20 * java.lang.Constructor中封装了构造函数的信息</div><div class="line">21 * getConstructor()方法获取所有的public的构造函数</div><div class="line">22 * getDeclaredConstructors得到所有的构造函数</div><div class="line">23 */</div><div class="line">24 Constructor[] cs = c.getDeclaredConstructors();</div><div class="line">25 for(Constructor constructor : cs)&#123;</div><div class="line">26 System.out.print(constructor.getName()+&quot;(&quot;);</div><div class="line">27 //获取构造函数的参数列表---》得到的是参数雷彪的类类型</div><div class="line">28 Class[] paramTypes = constructor.getParameterTypes();</div><div class="line">29 for(Class class1 : paramTypes)&#123;</div><div class="line">30 System.out.print(class1.getName()+&quot;,&quot;);</div><div class="line">31 &#125;</div><div class="line">32 System.out.println(&quot;)&quot;);</div><div class="line">33 &#125;</div></pre></td></tr></table></figure>
<h1 id="5-基本操作"><a href="#5-基本操作" class="headerlink" title="5. 基本操作"></a>5. 基本操作</h1><ul>
<li>获得方法<br>方法的名称和方法的参数列表才能唯一决定某个方法</li>
</ul>
<p>Method m = c.getDeclaredMethod(“方法名”，可变参数列表（参数类型.class）)</p>
<ul>
<li>方法的反射操作<br>m.invoke(对象,参数列表);<br>方法如果没有返回值，返回null，如果有返回值返回Object类型，然后再强制类型转换为原函数的返回值类型</li>
</ul>
<h1 id="6-通过反射来了解集合泛型本质"><a href="#6-通过反射来了解集合泛型本质" class="headerlink" title="6. 通过反射来了解集合泛型本质"></a>6. 通过反射来了解集合泛型本质</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 ArrayList list1 =new ArrayList();</div><div class="line">2 ArrayList&lt;String&gt; list2 =new ArrayList&lt;String&gt;();</div><div class="line">3 </div><div class="line">4 Class c1 = list1.getClass();</div><div class="line">5 Class c2 = list2.getClass();</div><div class="line">6 </div><div class="line">7 System.out.println(c1==c2);//结果为true</div></pre></td></tr></table></figure>
<p>因为反射的操作都是编译之后的操作，也就是运行时的操作，c1==c2返回true，说明编译之后集合的泛型是去泛型化的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Class类&quot;&gt;&lt;a href=&quot;#1-Class类&quot; class=&quot;headerlink&quot; title=&quot;1. Class类&quot;&gt;&lt;/a&gt;1. Class类&lt;/h1&gt;&lt;p&gt;任何一个类都是Class类的实例对象，这个实例对象有 三种表示方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Class c1 = Student.class;//实际告诉我们任何一个类都有一个隐含的静态成员变量class（知道类名时用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class c2 = stu.getClass();//已知该类的对象通过getClass方法（知道对象时用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class c3 = Class.forName(“类的全名”);//会有一个ClassNotFoundException异常&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然是Class类的实例,那么为什么不用new呢?因为 java.lang.Class类的构造方法是私有的.&lt;/p&gt;
&lt;p&gt;通过类类型来建立该类的实例:&lt;br&gt;Student stu = (Student)c1.newInstance();//前提是必须要有无参的构造方法，因为该语句会去调用其无参构造方法。该语句会抛出异常。&lt;/p&gt;
&lt;h1 id=&quot;2-动态加载类&quot;&gt;&lt;a href=&quot;#2-动态加载类&quot; class=&quot;headerlink&quot; title=&quot;2. 动态加载类&quot;&gt;&lt;/a&gt;2. 动态加载类&lt;/h1&gt;&lt;h2 id=&quot;1、-编译时加载类是静态加载类&quot;&gt;&lt;a href=&quot;#1、-编译时加载类是静态加载类&quot; class=&quot;headerlink&quot; title=&quot;1、 编译时加载类是静态加载类&quot;&gt;&lt;/a&gt;1、 编译时加载类是静态加载类&lt;/h2&gt;&lt;p&gt;new 创建对象是静态加载类，在编译时刻就需要加载所有可用使用到的类，如果有一个用不了，那么整个文件都无法通过编译&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>静态代码块执行顺序</title>
    <link href="http://yoursite.com/2017/05/17/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/05/17/静态代码块执行顺序/</id>
    <published>2017-05-17T10:22:51.000Z</published>
    <updated>2017-07-02T15:46:01.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行顺序：静态代码块-gt-构造代码块-gt-构造方法"><a href="#执行顺序：静态代码块-gt-构造代码块-gt-构造方法" class="headerlink" title="执行顺序：静态代码块&gt;构造代码块&gt;构造方法"></a>执行顺序：静态代码块&gt;构造代码块&gt;构造方法</h1><blockquote>
<p>理由：静态代码块（static{}）在类加载的时候执行一次。<br>构造代码块（{}内的部分）在每一次创建对象时执行，始终在构造方法前执行。<br>构造方法在新建对象时调用（ 就是new的时候 ）。<br>注意： a.静态代码块在类加载的时候就执行，所以它的优先级高于入口main()方法。 b.当三种形式不止一次出现，同优先级是按照先后顺序执行。</p>
</blockquote>
<h3 id="带继承的例子"><a href="#带继承的例子" class="headerlink" title="带继承的例子"></a>带继承的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class HelloB extends HelloA &#123;</div><div class="line">     </div><div class="line">     public HelloB()&#123;</div><div class="line">         System.out.println(&quot;B的构造方法&quot;);</div><div class="line">     &#125;</div><div class="line">     &#123;</div><div class="line">         System.out.println(&quot;B的构造代码块&quot;);</div><div class="line">     &#125;</div><div class="line">     static&#123;</div><div class="line">         System.out.println(&quot;B的静态代码块&quot;);</div><div class="line">     &#125;</div><div class="line">     //public static HelloB hB = new HelloB();</div><div class="line">     public static void main(String[] args)&#123;</div><div class="line">         new HelloB();//调用B的构造方法</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">class HelloA&#123;</div><div class="line">     public HelloA()&#123;</div><div class="line">         System.out.println(&quot;A的构造方法&quot;);</div><div class="line">     &#125;</div><div class="line">     &#123;</div><div class="line">         System.out.println(&quot;A的构造代码块&quot;);</div><div class="line">     &#125;</div><div class="line">     static&#123;</div><div class="line">         System.out.println(&quot;A的静态代码块&quot;);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果为：<br>A的静态代码块<br>B的静态代码块<br>A的构造代码块<br>A的构造方法<br>B的构造代码块<br>B的构造方法</p>
</blockquote>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>a.父类始终先调用（继承先调用父类），并且这三者之间的相对顺序始终保持不变</p>
<p>b.因为静态代码块在类加载时执行，所以先输出的是父类和子类的静态代码块</p>
<p>c.调用B的构造方法创建对象时，构造块和构造方法会一起按顺序执行，还是父类的先调用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;执行顺序：静态代码块-gt-构造代码块-gt-构造方法&quot;&gt;&lt;a href=&quot;#执行顺序：静态代码块-gt-构造代码块-gt-构造方法&quot; class=&quot;headerlink&quot; title=&quot;执行顺序：静态代码块&amp;gt;构造代码块&amp;gt;构造方法&quot;&gt;&lt;/a&gt;执行顺序：
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>HashTable和HashMap区别</title>
    <link href="http://yoursite.com/2017/05/15/HashTable%E5%92%8CHashMap%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/05/15/HashTable和HashMap区别/</id>
    <published>2017-05-15T05:21:23.000Z</published>
    <updated>2017-07-02T17:02:42.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-继承不同"><a href="#1-继承不同" class="headerlink" title="1.继承不同"></a>1.继承不同</h2><p>public class Hashtable extends Dictionary implements Map<br>public class HashMap extends AbstractMap implements Map</p>
<h2 id="2-Synchronized-关键字"><a href="#2-Synchronized-关键字" class="headerlink" title="2.Synchronized 关键字"></a>2.Synchronized 关键字</h2><p>Hashtable 中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用Hashtable，但是要使用HashMap的话就要自己增加同步处理了。<br><a id="more"></a></p>
<h2 id="3-Hashtable中，key和value都不允许出现null值"><a href="#3-Hashtable中，key和value都不允许出现null值" class="headerlink" title="3.Hashtable中，key和value都不允许出现null值"></a>3.Hashtable中，key和value都不允许出现null值</h2><p>在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。</p>
<h2 id="4-两个遍历方式的内部实现上不同"><a href="#4-两个遍历方式的内部实现上不同" class="headerlink" title="4.两个遍历方式的内部实现上不同"></a>4.两个遍历方式的内部实现上不同</h2><p>Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。</p>
<h2 id="5-哈希值的使用不同"><a href="#5-哈希值的使用不同" class="headerlink" title="5.哈希值的使用不同"></a>5.哈希值的使用不同</h2><p>HashTable直接使用对象的hashCode。而HashMap重新计算hash值。</p>
<h2 id="6-扩容方式不同"><a href="#6-扩容方式不同" class="headerlink" title="6.扩容方式不同"></a>6.扩容方式不同</h2><p>Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式. HashTable中hash数组默认大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-继承不同&quot;&gt;&lt;a href=&quot;#1-继承不同&quot; class=&quot;headerlink&quot; title=&quot;1.继承不同&quot;&gt;&lt;/a&gt;1.继承不同&lt;/h2&gt;&lt;p&gt;public class Hashtable extends Dictionary implements Map&lt;br&gt;public class HashMap extends AbstractMap implements Map&lt;/p&gt;
&lt;h2 id=&quot;2-Synchronized-关键字&quot;&gt;&lt;a href=&quot;#2-Synchronized-关键字&quot; class=&quot;headerlink&quot; title=&quot;2.Synchronized 关键字&quot;&gt;&lt;/a&gt;2.Synchronized 关键字&lt;/h2&gt;&lt;p&gt;Hashtable 中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用Hashtable，但是要使用HashMap的话就要自己增加同步处理了。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>模仿天猫全站,纯J2EE实现</title>
    <link href="http://yoursite.com/2017/05/02/%E6%A8%A1%E4%BB%BF%E5%A4%A9%E7%8C%AB%E5%85%A8%E7%AB%99-%E7%BA%AFJ2EE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/05/02/模仿天猫全站-纯J2EE实现/</id>
    <published>2017-05-02T15:14:40.000Z</published>
    <updated>2017-07-02T17:03:10.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://106.14.173.104/tianmao" target="_blank" rel="external">在线演示</a></p>
<ol>
<li>使用整套J2EE技术实现，关键逻辑Junit单元测试</li>
<li>Servlet + 反射 + Filter 来精简Servlet数量</li>
<li>采用webmagic框架爬取相关商品信息</li>
<li>采用Filter控制用户登录状态 &amp; 转换字符编码</li>
<li>MVC设计模式贯穿前台以及后台</li>
<li>整个后台使用统一的分页机制</li>
<li>模块化Jsp设计，将复杂页面抽象成可重用模块</li>
<li>MySQL作为数据库，MD5加密敏感数据</li>
</ol>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="//os3e5ayd1.bkt.clouddn.com//file/2017/7/1afa755050c14bb98885a1b7b4f205cf-image.png" alt="1afa755050c14bb98885a1b7b4f205cf-image.png"><br><img src="//os3e5ayd1.bkt.clouddn.com//file/2017/7/d870ec7102ed4c02a7035929453a5a69-image.png" alt="d870ec7102ed4c02a7035929453a5a69-image.png"></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><a id="more"></a>
<p><a href="https://github.com/lddahz789" target="_blank" rel="external">https://github.com/lddahz789</a><br>喜欢请star~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://106.14.173.104/tianmao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线演示&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用整套J2EE技术实现，关键逻辑Junit单元测试&lt;/li&gt;
&lt;li&gt;Servlet + 反射 + Filter 来精简Servlet数量&lt;/li&gt;
&lt;li&gt;采用webmagic框架爬取相关商品信息&lt;/li&gt;
&lt;li&gt;采用Filter控制用户登录状态 &amp;amp; 转换字符编码&lt;/li&gt;
&lt;li&gt;MVC设计模式贯穿前台以及后台&lt;/li&gt;
&lt;li&gt;整个后台使用统一的分页机制&lt;/li&gt;
&lt;li&gt;模块化Jsp设计，将复杂页面抽象成可重用模块&lt;/li&gt;
&lt;li&gt;MySQL作为数据库，MD5加密敏感数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;截图&quot;&gt;&lt;a href=&quot;#截图&quot; class=&quot;headerlink&quot; title=&quot;截图&quot;&gt;&lt;/a&gt;截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;//os3e5ayd1.bkt.clouddn.com//file/2017/7/1afa755050c14bb98885a1b7b4f205cf-image.png&quot; alt=&quot;1afa755050c14bb98885a1b7b4f205cf-image.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;//os3e5ayd1.bkt.clouddn.com//file/2017/7/d870ec7102ed4c02a7035929453a5a69-image.png&quot; alt=&quot;d870ec7102ed4c02a7035929453a5a69-image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="J2EE" scheme="http://yoursite.com/tags/J2EE/"/>
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="http://yoursite.com/2016/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/08/22/Java学习笔记/</id>
    <published>2016-08-22T14:53:53.000Z</published>
    <updated>2017-07-09T12:31:26.928Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>异常捕获时,把需要关闭流的语句写在try()的括号里,之后会自动关闭流,不用再写多余的代码.</li>
<li>反射:getField 只能获取public的，包括从父类继承来的字段。getDeclaredField 可以获取本类所有的字段，包括private的，但是不能获取继承来的字段. (注： 这里只能获取到private的字段，但并不能访问该private字段的值)</li>
<li>JSP SERVLET中 getParameter 取的是表单发过来的值,getAttribute取的是自己setAttribute的值</li>
<li>JSP forward是服务器跳转, redirect是客户端跳转<a id="more"></a></li>
<li>MyBatis中#与$的区别: #{para}会产生PreparedStatement的占位符 ${something}则直接将花括号里的something插入插入字符串</li>
<li>接口中方法默认为 public abstract, 变量默认为 public static final</li>
<li>深度为k的满二叉树有(2^k)-1个节点,在二叉树的第i个节点上最多有2^(i-1)个节点, 具有 n 个结点的完全二叉树的深度为log(2)(n) +1</li>
<li>时间复杂度为O(n^2)的插入排序有时非常好用,比如在处理一个接近有序的数组时</li>
<li><p>~取反运算符运算符. 例如有十进制数10,则~10= -11 (便捷公式~n=-n-1)</p>
<p><strong>原理</strong><br>计算机本身储存的就是补码：<br>那么10的补码就是10的原码：0000 0000 0000 1010——这是补码，因为现在是计算机在计算<br>~10的补码就是：1111 1111 1111 0101<br>~10的反码就是：1111 1111 1111 0100——补码减1<br>~10的原码就是：1000 0000 0000 1011——反码取反：这个才是正常二进制数，换算为整数为-11</p>
</li>
<li><p>两个数值进行二元操作时，会有如下的转换操作：<br>如果两个操作数其中有一个是double类型，另一个操作就会转换为double类型。<br>否则，如果其中一个操作数是float类型，另一个将会转换为float类型。<br>否则，如果其中一个操作数是long类型，另一个会转换为long类型。<br>否则，两个操作数都转换为int类型。</p>
</li>
<li><p>Java8 中接口可以有默认方法 用关键字 default, 实现了该接口的类可以选择直接使用或者重写该方法</p>
</li>
<li>(数据库中)悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。<br>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。 乐观锁不能解决脏读的问题。<br>JAVA 独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁.<br>乐观锁的概念，他的核心思路就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止.</li>
<li>volatile关键字的作用: 保证此变量对所有线程的可见性，指一条线程修改了这个变量的值，新值对于其他线程来说是可见的，但并不是多线程安全的,另外一个作用是禁止指令的重排序优化4</li>
</ol>
<hr>
<ol>
<li>线程池的作用：在程序启动的时候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程<br>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。<br>第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。<br>第三：提高线程的可管理性。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;异常捕获时,把需要关闭流的语句写在try()的括号里,之后会自动关闭流,不用再写多余的代码.&lt;/li&gt;
&lt;li&gt;反射:getField 只能获取public的，包括从父类继承来的字段。getDeclaredField 可以获取本类所有的字段，包括private的，但是不能获取继承来的字段. (注： 这里只能获取到private的字段，但并不能访问该private字段的值)&lt;/li&gt;
&lt;li&gt;JSP SERVLET中 getParameter 取的是表单发过来的值,getAttribute取的是自己setAttribute的值&lt;/li&gt;
&lt;li&gt;JSP forward是服务器跳转, redirect是客户端跳转
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
